#include <stdio.h>
#include <string.h>
#include <SDL/SDL.h>
#include <SDL/SDL_image.h>
#include <unistd.h>
#include "timer.h"

#define SCREEN_WIDTH   640 
#define SCREEN_HEIGHT  480 
#define SCREEN_BPP  32
#define FRAMES_PER_SECOND   5

SDL_Surface *screen = NULL;
SDL_Surface *background = NULL;
SDL_Rect clips[15];
SDL_Event event;


SDL_Surface* load_image(char* filename)
{
    SDL_Surface* loadImage = NULL; 
    SDL_Surface* optimizedImage = NULL;

    //loadImage = SDL_LoadBMP(filename);
    loadImage = IMG_Load(filename);
    if (loadImage == NULL) {
        printf("SDL_LoadBMP ERROR");
        return NULL;
    } else {
        optimizedImage = SDL_DisplayFormat(loadImage);
        SDL_FreeSurface(loadImage);
    }

    return optimizedImage;
}

void apply_surface( int x, int y, SDL_Surface* source, 
        SDL_Surface* destination, SDL_Rect* clip)
{
    SDL_Rect offset;
    offset.x = x;
    offset.y = y;

    SDL_BlitSurface(source, clip, destination, &offset);
    return;
}

bool init()
{
    int ret = 0;

    ret = SDL_Init(SDL_INIT_EVERYTHING);
    if (ret < 0) {
        printf("SDL INIT ERROR\n");
        return 0;
    }

    screen = SDL_SetVideoMode(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_BPP, SDL_SWSURFACE);
    if (screen == NULL) {
        printf("SDL_SetVideoMode ERROR");
        return 0;
    }

    SDL_WM_SetCaption("background", NULL);

    return 1;
}

void clean_up()
{
    SDL_FreeSurface(background);

    SDL_Quit(); 
}

bool load_files()
{
    unsigned long int colorkey;

    background = load_image("person.png");
    if (background == NULL) {
        printf("load_image error\n");
        return 0;
    } else {
        colorkey = SDL_MapRGB(background->format, 0x00, 0xFF, 0xFF);
        SDL_SetColorKey(background, SDL_SRCCOLORKEY, colorkey);
    }


    return 1;
}

int set_clips()
{
    int i;
    for (i = 0; i < 4; i++) {
        clips[i].x = i*64;
        clips[i].y = 0;
        clips[i].w = 64;
        clips[i].h = 205;
    }
}

//int main(int argc, char* argv[])
int main()
{
    int ret = 0;
    bool quit = false;

    ret = init();
    if (ret == 0) {
        printf("init error\n");
        return 1;
    }

    ret = load_files(); 
    if (ret == 0) {
        printf("load files error\n");
        return 1;
    }

    SDL_FillRect(screen, &screen->clip_rect, SDL_MapRGB(screen->format, 0xFF, 0xFF, 0xFF));
    set_clips();

    Timer fps;

    int i = 0;
    int j = 0;
    //for (i = 0 ; i < 15; i++) {
    //    apply_surface(0, 0, background, screen, &clips[1] );
    //}
    SDL_Flip(screen);

    //SDL_Delay(2000);
    while (quit == false) {
        fps.start();
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT) {
               quit = true; 
            }
        }
        SDL_FillRect(screen, &screen->clip_rect, 
                SDL_MapRGB(screen->format, 0xFF, 0xFF, 0xFF));
        apply_surface(j*10, 0, background, screen, &clips[i] );
        //apply_surface(i*10, 0, background, screen, &clips[i] );
        i++;
        j++;
        if (i == 4) {
            i = 0;
        }
        if (j == 60) {
            j = 0;
        }
        SDL_Flip(screen);

        printf("get_ticks()   %x\n", SDL_GetTicks());
        printf("fps.get_ticks()   %x\n", fps.get_ticks());
        //Cap the frame rate
        if( fps.get_ticks() < 1000 / FRAMES_PER_SECOND )
        {
            SDL_Delay( ( 1000 / FRAMES_PER_SECOND ) - fps.get_ticks() );
        }
    }

    clean_up();
    return 0;
}
